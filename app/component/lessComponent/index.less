@color: black;
@white_font: white;
@div2: .div-2;
@borderStyle: border-style;
@Solid:solid;
@images: "./image.png";
.div-1 {
    background-color: @color;
    color: @white_font;
}
@{div2} { // 变量名必须使用大括号包裹
    background-color: green;
}
.div-3 {
    @{borderStyle}: @Solid; // 变量名必须使用大括号包裹
}
.div-4 {
    background: url('@{images}'); // 变量名必须使用大括号包裹
}
@div5background: {
    background-color: wheat;
};
@div5layout: {
    width: 200px;
    height: 200px;
    border: green solid 1px;
};
.div-5 {
    @div5background();
    @div5layout();
}
/**
加减法时 以第一个数据的单位为基准
乘除法时 注意单位一定要统一
*/
@div6width: 300px;
@div6color: #222;
.div-6 {
    width: @div6width - 100;
    background-color:@div6color * 2;
}
/**
就近原则
*/
@var: @a;
@a: 100%;
.div-7 {
    width: @var;
    @a: 9%;
    background-color:@div6color * 2;
}
/**
就近原则
*/
@div8fnord: 'yellow';
@div8var: 'div8fnord';
.div-8::after {
    width: 200px;
    content: @@div8var;
    background-color:@div6color * 2;
}

.div-9 {
    &-child1 {
        background-color: greenyellow;
    }
    &-child2 {
        color: greenyellow;
    }
    &::after {
        content: '我是after';
    }
}

.div-10 {
    width: 200px;
    background-color:white;
}
.div-11 {
    // .div-10; 无参数写不写括号都可以
    .div-10();
}
.back12(@color:#222) {
    background-color: @color;
}
.div-12 {
    .back12(greenyellow);
}


.triangle(top,@width:20px,@color:#000){
    border-color:transparent  transparent @color transparent ;
}
.triangle(right,@width:20px,@color:#000){
    border-color:transparent @color transparent  transparent ;
}

.triangle(bottom,@width:20px,@color:#000){
    border-color:@color transparent  transparent  transparent ;
}
.triangle(left,@width:20px,@color:yellow){
    border-color:transparent  transparent  transparent @color;
}
.triangle(@_,@width:20px,@color: red){
    border-style: solid;
    border-width: @width;
}
/*
第一个参数 left 要会找到方法中匹配程度最高的，如果匹配程度相同，将全部选择，并存在着样式覆盖替换。
如果匹配的参数 是变量，则将会匹配，如 @_ 。
*/
.div-13{
    .triangle(left, 50px,)
}
#card(){
    background: #723232;
    .d(@w:300px){
        width: @w;
        
        #a(@h:300px){
            height: @h;//可以使用上一层传进来的方法
        }
    }
}
.div-14 {
    #card >.d > #a(100px);
    background-color: grey;
}
/**
在 CSS 中> 选择器，选择的是 儿子元素，就是 必须与父元素 有直接血源的元素。
在引入命令空间时，如使用 > 选择器，父元素不能加 括号。
不得单独使用命名空间的方法 必须先引入命名空间，才能使用 其中方法。
子方法 可以使用上一层传进来的方法
*/
#card15{
    
    // and 运算符 ，相当于 与运算 &&，必须条件全部符合才会执行
    .border(@width,@color,@style) when (@width>100px) and(@color=#999){
        border:@style @color @width;
    }

    // not 运算符，相当于 非运算 !，条件为 不符合才会执行
    .background(@color) when not (@color>=#222){
        background:@color;
    }

    // , 逗号分隔符：相当于 或运算 ||，只要有一个符合条件就会执行
    .font(@size:20px) when (@size>50px) , (@size<100px){
        font-size: @size;
    }
}
.div-15 {
    #card15 >.border(200px, #999, solid);
    background-color: grey;
}


.boxShadow(...){
    box-shadow: @arguments;
}
.textShadow(@a,...){
    text-shadow: @arguments;
}
.div-16{
    .boxShadow(1px,4px,30px,green);
    .textShadow(1px,4px,30px,green);
}
/**使用important
 相当于给div17border中所有样式都加了important
*/
.div17border{
    border: solid 1px black;
    margin: 50px;
}
.div-17 {
    .div17border() !important;
    border: solid 1px green;
}

.generate-columns(@n, @i: 1) when (@i =< @n) {
    .column-@{i} {
      width: (@i * 100% / @n);
      border: solid black 1px;
    }
    .generate-columns(@n, (@i + 1));
  }
.div-18 {
   .generate-columns(4); 
}

/**
* +_ 代表的是 空格；+ 代表的是 逗号。
*/
.div19boxShadow() {
    box-shadow+: inset 0 0 10px #555;
}
.div19Animation() {
    transform+_: scale(2);
}
.div-19 {
    .div19boxShadow();
    box-shadow+: 0 0 20px black;
    transform+_: rotate(15deg);
}
/**
* 相当于
    box-shadow: inset 0 0 10px #555, 0 0 20px black;
    transform: scale(2) rotate(15deg);
*/

